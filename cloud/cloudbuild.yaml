# Cloud Build configuration for full-stack deployment
steps:
  # Build FastAPI image
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-f', 'cloud/Dockerfile.backend', '-t', 'gcr.io/$PROJECT_ID/finreview-app:$COMMIT_SHA', '.']
    
  # Push FastAPI image to Container Registry
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/finreview-app:$COMMIT_SHA']
    
  # Deploy FastAPI to Cloud Run
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'gcloud'
    args:
      - 'run'
      - 'deploy'
      - 'finreview-app'
      - '--image'
      - 'gcr.io/$PROJECT_ID/finreview-app:$COMMIT_SHA'
      - '--region'
      - 'europe-west1'
      - '--platform'
      - 'managed'
      - '--allow-unauthenticated'
      - '--port'
      - '8080'
      - '--memory'
      - '1Gi'
      - '--cpu'
      - '1'
      - '--max-instances'
      - '10'
      - '--timeout'
      - '900'
      - '--set-env-vars'
      - 'DATABASE_URL=postgresql://finreview_user:FlhugG77XDC1_0SlYUfhuzd-TkEySuwTtYFcV3luIh0@35.214.141.13:5432/finreview'
      - '--set-env-vars'
      - 'ENVIRONMENT=production'
      - '--set-env-vars'
      - 'FRONTEND_URL=https://finreview-app.web.app'
      - '--set-secrets'
      - 'GOOGLE_CLIENT_ID=google-client-id:latest,GOOGLE_CLIENT_SECRET=google-client-secret:latest,JWT_SECRET_KEY=jwt-secret-key:latest'
      
  # Get FastAPI service URL for frontend
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Getting FastAPI service URL..."
        FASTAPI_URL=$$(gcloud run services describe finreview-app --region=europe-west1 --format="value(status.url)")
        echo "FastAPI URL: $$FASTAPI_URL"
        echo "FASTAPI_URL=$$FASTAPI_URL" >> /workspace/fastapi_url.env
        echo "FastAPI URL saved for frontend build"
      
  # Build frontend with correct API URL
  - name: 'node:18'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        source /workspace/fastapi_url.env
        echo "Building frontend with API URL: $$FASTAPI_URL"
        cd frontend
        echo "Current directory: $$(pwd)"
        echo "Contents: $$(ls -la)"
        echo "Source directory: $$(ls -la src/)"
        echo "Lib directory: $$(ls -la src/lib/)"
        npm install
        NEXT_PUBLIC_API_URL=$$FASTAPI_URL npm run build
        echo "Frontend build completed"
        
  # Build Firebase CLI image
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-f', 'cloud/Dockerfile.firebase', '-t', 'gcr.io/$PROJECT_ID/firebase:$COMMIT_SHA', '.']
    
  # Push Firebase CLI image
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/firebase:$COMMIT_SHA']
        
  # Deploy frontend to Firebase Hosting
  - name: 'gcr.io/$PROJECT_ID/firebase:$COMMIT_SHA'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Deploying frontend to Firebase Hosting..."
        firebase deploy --only hosting --token $$_FIREBASE_TOKEN
        echo "Frontend deployment completed"

# Store images in Container Registry
images:
  - 'gcr.io/$PROJECT_ID/finreview-app:$COMMIT_SHA'
  - 'gcr.io/$PROJECT_ID/firebase:$COMMIT_SHA'

# Build options
options:
  machineType: 'E2_HIGHCPU_8'
  diskSizeGb: 100
  logging: CLOUD_LOGGING_ONLY
