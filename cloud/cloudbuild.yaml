# Cloud Build configuration for full-stack deployment
steps:
  # Build FastAPI image
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-f', 'cloud/Dockerfile.backend', '-t', 'gcr.io/$PROJECT_ID/finreview-app:$COMMIT_SHA', '.']
    
  # Push FastAPI image to Container Registry
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/finreview-app:$COMMIT_SHA']
    
  # Deploy FastAPI to Cloud Run and capture URL
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Deploying FastAPI backend to Cloud Run..."
        BACKEND_URL=$$(gcloud run deploy finreview-app \
          --image=gcr.io/$PROJECT_ID/finreview-app:$COMMIT_SHA \
          --region=europe-west1 \
          --platform=managed \
          --allow-unauthenticated \
          --port=8080 \
          --memory=1Gi \
          --cpu=1 \
          --max-instances=10 \
          --timeout=900 \
          --set-env-vars=DATABASE_URL=postgresql://finreview_user:FlhugG77XDC1_0SlYUfhuzd-TkEySuwTtYFcV3luIh0@35.214.141.13:5432/finreview \
          --set-env-vars=ENVIRONMENT=production \
          --set-env-vars=FRONTEND_URL=https://finreview-app.web.app \
          --set-env-vars=GOOGLE_REDIRECT_URI=https://financial-apps-471615.web.app/auth/google/callback \
          --set-secrets=GOOGLE_CLIENT_ID=google-client-id:latest,GOOGLE_CLIENT_SECRET=google-client-secret:latest,JWT_SECRET_KEY=jwt-secret-key:latest \
          --format="value(status.url)")
        
        echo "‚úÖ Backend deployed at: $$BACKEND_URL"
      
  # Run database migration (idempotent)
  - name: 'postgres:15'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Checking if database migration is needed..."
        
        # Check if operationtype table exists and has data
        TABLE_COUNT=$$(PGPASSWORD=FlhugG77XDC1_0SlYUfhuzd-TkEySuwTtYFcV3luIh0 psql -h 35.214.141.13 -U finreview_user -d finreview -t -c "SELECT COUNT(*) FROM operationtype;" 2>/dev/null || echo "0")
        
        if [ "$$TABLE_COUNT" -gt 0 ]; then
          echo "‚úÖ Database already initialized ($$TABLE_COUNT operation types found)"
          echo "Skipping migration - tables and data already exist"
        else
          echo "üîÑ Database not initialized, running migration..."
          echo "Creating tables..."
          PGPASSWORD=FlhugG77XDC1_0SlYUfhuzd-TkEySuwTtYFcV3luIh0 psql -h 35.214.141.13 -U finreview_user -d finreview -f /workspace/cloud/create_tables.sql
          echo "Inserting initial data..."
          PGPASSWORD=FlhugG77XDC1_0SlYUfhuzd-TkEySuwTtYFcV3luIh0 psql -h 35.214.141.13 -U finreview_user -d finreview -f /workspace/cloud/migrate.sql
          echo "‚úÖ Database migration completed"
        fi
    env:
      - 'PGPASSWORD=FlhugG77XDC1_0SlYUfhuzd-TkEySuwTtYFcV3luIh0'
      
  # Get FastAPI service URL for frontend
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Getting FastAPI service URL..."
        FASTAPI_URL=$$(gcloud run services describe finreview-app --region=europe-west1 --format="value(status.url)")
        echo "FastAPI URL: $$FASTAPI_URL"
        echo "FASTAPI_URL=$$FASTAPI_URL" >> /workspace/fastapi_url.env
        echo "FastAPI URL saved for frontend build"
      
  # Build frontend with correct API URL
  - name: 'node:18'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        source /workspace/fastapi_url.env
        echo "Building frontend with API URL: $$FASTAPI_URL"
        echo "Workspace contents: $$(ls -la /workspace/)"
        echo "Frontend directory exists: $$(test -d frontend && echo 'YES' || echo 'NO')"
        cd frontend
        echo "Current directory: $$(pwd)"
        echo "Contents: $$(ls -la)"
        echo "Source directory: $$(ls -la src/)"
        echo "Lib directory exists: $$(test -d src/lib && echo 'YES' || echo 'NO')"
        echo "Lib directory: $$(ls -la src/lib/ || echo 'NOT FOUND')"
        npm install
        echo "Building frontend with NEXT_PUBLIC_API_URL=$$FASTAPI_URL"
        echo "=== TEMPORARILY MOVING DYNAMIC ROUTES ==="
        # Move dynamic routes that can't be statically exported
        mkdir -p ../temp-routes
        if [ -d "src/app/pdf" ]; then
          echo "Moving pdf/[id] route to temp directory..."
          mv src/app/pdf ../temp-routes/
        fi
        echo "=== STARTING NEXT.JS BUILD ==="
        NEXT_PUBLIC_API_URL=$$FASTAPI_URL npm run build 2>&1 | tee build.log
        BUILD_EXIT_CODE=$$?
        echo "=== BUILD COMPLETED WITH EXIT CODE: $$BUILD_EXIT_CODE ==="
        
        echo "=== BUILD LOG CONTENTS ==="
        cat build.log || echo "No build log found"
        echo "=== END BUILD LOG ==="
        
        echo "Checking if build succeeded..."
        if [ -d "out" ] && [ "$$(ls -A out)" ]; then
          echo "‚úÖ Static export successful - out directory exists and has files"
          ls -la out/
          echo "File count in out/: $$(find out -type f | wc -l)"
        else
          echo "‚ùå Static export failed - out directory missing or empty"
          echo "Build artifacts in .next/:"
          ls -la .next/ || echo "No .next directory"
          echo "Creating fallback..."
          mkdir -p out
          echo "<html><body><h1>Build Failed - Check Logs</h1><p>Build exit code: $$BUILD_EXIT_CODE</p></body></html>" > out/index.html
          echo "‚ö†Ô∏è Using fallback - static export failed"
        fi
        
        echo "=== RESTORING DYNAMIC ROUTES ==="
        # Restore the dynamic routes
        if [ -d "../temp-routes/pdf" ]; then
          echo "Restoring pdf/[id] route..."
          mv ../temp-routes/pdf src/app/
          rm -rf ../temp-routes
        fi
        
        echo "Frontend build completed"
        
  # Build Firebase CLI image
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-f', 'cloud/Dockerfile.firebase', '-t', 'gcr.io/$PROJECT_ID/firebase:$COMMIT_SHA', '.']
    
  # Push Firebase CLI image
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/firebase:$COMMIT_SHA']
        
  # Deploy frontend to Firebase Hosting
  - name: 'gcr.io/$PROJECT_ID/firebase:$COMMIT_SHA'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Deploying frontend to Firebase Hosting..."
        echo "=== DEBUG: Firebase Token Analysis ==="
        echo "Raw substitution variable: $_FIREBASE_TOKEN"
        echo "Firebase token available: $(test -n "$_FIREBASE_TOKEN" && echo 'YES' || echo 'NO')"
        echo "Token length: $(echo "$_FIREBASE_TOKEN" | wc -c)"
        echo "Token first 20 chars: $(echo "$_FIREBASE_TOKEN" | cut -c1-20)"
        echo "Token last 20 chars: $(echo "$_FIREBASE_TOKEN" | rev | cut -c1-20 | rev)"
        echo "All environment variables containing FIREBASE:"
        env | grep -i firebase || echo "No FIREBASE variables found"
        echo "All substitution variables:"
        env | grep "^_" || echo "No substitution variables found"
        echo "=== END DEBUG ==="
        echo "Checking if frontend/out directory exists..."
        ls -la frontend/ || echo "Frontend directory not found"
        ls -la frontend/out/ || echo "Frontend/out directory not found"
        echo "Current directory contents:"
        ls -la
        echo "Getting current Cloud Run service URL..."
        BACKEND_URL=$$(gcloud run services describe finreview-app --region=europe-west1 --format="value(status.url)")
        echo "Using backend URL: $$BACKEND_URL"
        
        echo "Setting Firebase Functions environment variables..."
        firebase functions:config:set backend.url="$$BACKEND_URL" --token "$_FIREBASE_TOKEN"
        
        echo "Deploying Firebase Functions and Hosting..."
        firebase deploy --only functions,hosting --token "$_FIREBASE_TOKEN"
        echo "Firebase deployment completed"

# Store images in Container Registry
images:
  - 'gcr.io/$PROJECT_ID/finreview-app:$COMMIT_SHA'
  - 'gcr.io/$PROJECT_ID/firebase:$COMMIT_SHA'

# Build options
options:
  machineType: 'E2_HIGHCPU_8'
  diskSizeGb: 100
  logging: CLOUD_LOGGING_ONLY
